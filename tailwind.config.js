module.exports = {
  // The content section is where you configure the paths to all of your HTML templates, JS components, and any other files that contain Tailwind class names.
  // Configuring source paths, https://tailwindcss.com/docs/content-configuration
  //  write your paths relative to the root of your project.
  content: [
    // other paths  Be specific with your content patterns
    // './pages/**/*.{html,js}',
    // './components/**/*.{html,js}',
    // './src/**/*.{html,js,jsx}' for react
    './index.html',
    /**
     * Don't forget your HTML entry point if applicable (Some frameworks)
     *  './public/index.html',
     * */ 

    /*
    If you have any JavaScript files that manipulate your HTML to add classes
     */
  ],



  // The theme section is where you define your color palette, fonts, type scale, border sizes, breakpoints — anything related to the visual design of your site.
  // Project-specific customizations, https://tailwindcss.com/docs/theme
  theme: {
    // The screens key allows you to customize the responsive breakpoints in your project.
    // https://tailwindcss.com/docs/screens
    screens: {
      // custom breakpoints  
      sm: '480px',
      md: '768px',
      lg: '976px',
      xl: '1440px',
    },
    // The colors key allows you to customize the global color palette for your project.
    // https://tailwindcss.com/docs/customizing-colors
    // By default, these colors will be made available everywhere in the framework where you use colors, like the text color utilities, border color utilities, background color utilities, and more.
    colors: {
      primary: '#5c6ac4',
      secondary: '#ecc94b',
      // alias & colors from  default color palette
      // primary: colors.indigo,
      // secondary: colors.yellow,
      transparent: 'transparent',
      black: '#000',
      blue: '#1fb6ff',
      purple: '#7e5bef',
      pink: '#ff49db',
      orange: '#ff7849',
      green: '#13ce66',
      yellow: '#ffc82c',
      'gray-dark': '#273444',
      gray: '#8492a6',
      'gray-light': '#d3dce6',
      // The nested keys 
      'tahiti': {
        100: '#cffafe',
        200: '#a5f3fc',
        300: '#67e8f9',
        400: '#22d3ee',
        500: '#06b6d4',
        600: '#0891b2',
        700: '#0e7490',
        800: '#155e75',
        900: '#164e63',
      },
    },
    // Customizing the default spacing and sizing scale for your project.
    // By default: https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale

    spacing: {
      // '1': '8px',
      // '2': '12px',
      // '3': '16px',
      // '4': '24px',
      // '5': '32px',
      // '6': '48px',
      sm: '8px',
      md: '12px',
      lg: '16px',
      xl: '24px',
    },

    fontFamily: {
      sans: ['Graphik', 'sans-serif'],
      serif: ['Merriweather', 'serif'],
    },
    // Extending the default spacing scale  
    // https://tailwindcss.com/docs/customizing-spacing#default-spacing-scale
    extend: {
      spacing: {
        // This will generate classes like p-13, m-15, and h-128 in addition to all of Tailwind’s default spacing/sizing utilities.
        '13': '3.25rem',
        '15': '3.75rem',
        '128': '32rem',
        '144': '36rem',
        '8xl': '96rem',
        '9xl': '128rem',
      },
      borderRadius: {
        '4xl': '2rem',
      },
    },
  },
  // The plugins section allows you to register plugins with Tailwind that can be used to generate extra utilities, components, base styles, or custom variants.
  plugins: [
    // Official plugins
    require('@tailwindcss/forms'),
    require('@tailwindcss/aspect-ratio'),
    require('@tailwindcss/typography'),
    require('@tailwindcss/line-clamp'),
    require('@tailwindcss/forms'),
  ],

  // The prefix option allows you to add a custom prefix to all of Tailwind’s generated utility classes. This can be really useful when layering Tailwind on top of existing CSS where there might be naming conflicts.
  // Prefixes are only added to classes generated by Tailwind; no prefix will be added to your own custom classes.
  // prefix: 'tw-',
  // The presets section allows you to specify your own custom base configuration instead of using Tailwind’s default base configuration.
  // presets: [
  //   require('@acmecorp/base-tailwind-config')
  // ],

  // The important option lets you control whether or not Tailwind’s utilities should be marked with !important. This can be really useful when using Tailwind with existing CSS that has high specificity selectors.
  // This also applies to any custom utilities you define in your CSS using the @layer utilities directive:
  // important: true,


  // separator: '_',
  // The separator option lets you customize which character should be used to separate modifiers (screen sizes, hover, focus, etc.) from utility names (text-center, items-end, etc.).
  // We use a colon by default (:), but it can be useful to change this if you’re using a templating language like Pug that doesn’t support special characters in class names.

 // Core Plugins. 
 // The corePlugins section lets you completely disable classes that Tailwind would normally generate by default if you don’t need them for your project.
 // To disable specific core plugins, provide an object for corePlugins that sets those plugins to false:
  // corePlugins: {
  //   float: false,
  //   objectFit: false,
  //   objectPosition: false,
  // }
  // If you’d like to safelist which core plugins should be enabled, provide an array that includes a list of the core plugins you’d like to use:
  /*
  corePlugins: [
    'margin',
    'padding',
    'backgroundColor',
    // ...
  ]

  If you’d like to disable all of Tailwind’s core plugins and simply use Tailwind as a tool for processing your own custom plugins, provide an empty array:

  corePlugins: []
  */
};

/* Official plugins
Typography
The @tailwindcss/typography plugin adds a set of prose classes that can be used to quickly add sensible typographic styles to content blocks that come from sources like markdown or a CMS database.

Line-clamp
The @tailwindcss/line-clamp plugin adds line-clamp-{lines} classes you can use to truncate text to a fixed number of lines.

Forms
The @tailwindcss/forms plugin adds an opinionated form reset layer that makes it easier to style form elements with utility classes.

Aspect ratio
The @tailwindcss/aspect-ratio plugin adds aspect-w-{n} and aspect-h-{n} classes that can be combined to give an element a fixed aspect ratio.*/
